{"version":3,"sources":["../../src/utils/index.js","App.js","../../src/index.js","index.js"],"names":["utils","defaultDownloadImage","fileName","format","data","link","document","App","pixelRatio","backgroundColor","restOptions","callbackFunc","baseRef","useRef","useState","isLoading","error","dataURL","setRef","useCallback","node","defaultGetter","func","key","a","setState","prevState","output","getSvg","getJpeg","getPng","getBlob","getCanvas","getPixelData","ref","useToImage","buttons","setButtons","style","display","justifyContent","alignItems","flexDirection","onClick","map","button","ReactDOM","render","getElementById"],"mappings":"2SAAaA,EAAQ,CACnBC,qBADmB,YACmD,QAA/CC,gBAA+C,MAAjD,WAAiD,MAAxBC,cAAwB,MAAjD,MAAiD,EAARC,EAAQ,EAARA,KACtDC,EAAOC,uBAAb,KACAD,qBAAmBH,EAAnBG,eACAA,SACAA,Y,6DCFW,SAASE,IACtB,MCUK,WAGL,6DAHK,GAGL,IAFEC,kBAEF,MAFA,EAEA,MAFkBC,uBAElB,MAFA,cAEA,EAFsDC,EAEtD,iBADAC,EACA,uDADeX,EAFV,qBAICY,EAAUC,mBAChB,EAA0BC,mBAAS,CACjCC,WADiC,EAEjCC,MAFiC,KAGjCC,QAAS,OAHX,mBAAM,EAAN,KAAM,EAAN,KAMMC,EAASC,uBAAaC,YAC1B,GAAIR,YAAJ,EACE,YACSQ,IACTR,eAJJ,IAQMS,EAAgB,SAACC,EAAMC,EAAKpB,GAAZ,6BAAuB,4BAAAqB,EAAA,6DAC3CC,GAAUC,YAAD,mBAAC,eAAe,GAAhB,IAA4BX,WAAW,OADL,kBAIpBO,EAAI,OAACV,QAAD,IAACA,OAAD,EAACA,EAAD,qBACvBJ,aACAC,mBACGC,IAPoC,OAInCiB,EAJmC,OAUzCF,GAAUC,YAAD,mBAAC,eAAe,GAAhB,gBAEPX,WAFuB,EAGvBC,OAHuB,GAIvB,EAAOW,OAGThB,EAAa,yBACXR,SACAC,KAFW,MAIRM,IArBoC,gDAwBzCe,GAAUC,YAAD,mBAAC,eAAe,GAAhB,IAEPX,WAFuB,EAGvBC,MAAO,EAAF,QA3BkC,0DAgCvCY,EAAST,sBAAYE,EAAc,EAAD,YAAd,OAA1B,IACMQ,EAAUV,sBAAYE,EAAc,EAAD,YAAd,QAA3B,IACMS,EAASX,sBAAYE,EAAc,EAAD,YAAd,OAA1B,IACMU,EAAUZ,sBAAYE,EAAc,EAAD,YAAd,OAA3B,IACMW,EAAYb,sBAAYE,EAAc,EAAD,YAAd,OAA7B,IACMY,EAAed,sBACnBE,EAAc,EAAD,YADiB,OAAhC,IAKA,kCAAO,GAAP,IAEEa,IAFK,EAGLN,SACAC,UACAC,SACAC,UACAE,eACAD,cD/E2DG,GAArDD,EAAR,EAAQA,IAAKnB,EAAb,EAAaA,UAAWa,EAAxB,EAAwBA,OAAQE,EAAhC,EAAgCA,OAAQD,EAAxC,EAAwCA,QACxC,GADA,iBAC8Bf,mBAAS,KAAvC,mBAAOsB,EAAP,KAAgBC,EAAhB,KAEA,OACE,gCACGtB,GAAa,8CACd,sBACEmB,IAAKA,EACLI,MAAO,CACLC,QAAS,OAGTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,UARnB,UAWE,iDACA,wBAAQC,QAASf,EAAjB,0BACA,wBAAQe,QAASd,EAAjB,2BACA,wBAAQc,QAASb,EAAjB,0BAEA,yCACA,wBACEa,QAAS,kBAAMN,GAAW,SAACX,GAAD,4BAAmBA,GAAnB,CAA8B,cAD1D,yBAMCU,EAAQQ,KAAI,SAACC,GAAD,OACX,+BAAoBA,GAATA,YE5BrBC,IAASC,OAAO,cAACxC,EAAD,IAASD,SAAS0C,eAAe,W","file":"static/js/main.54120077.chunk.js","sourcesContent":["export const utils = {\n  defaultDownloadImage({ fileName = 'download', format = 'png', data }) {\n    const link = document.createElement('a')\n    link.download = `${fileName}.${format}`\n    link.href = data\n    link.click()\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport { useToImage } from '@hcorta/react-to-image'\n\nexport default function App() {\n  const { ref, isLoading, getSvg, getPng, getJpeg, ...rest } = useToImage()\n  const [buttons, setButtons] = useState([])\n\n  return (\n    <div>\n      {isLoading && <span>loading...</span>}\n      <div\n        ref={ref}\n        style={{\n          display: 'flex',\n          // height: 400,\n          // width: 400,\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column'\n        }}\n      >\n        <h1>This is a title</h1>\n        <button onClick={getSvg}>Download SVG</button>\n        <button onClick={getJpeg}>Download JPEG</button>\n        <button onClick={getPng}>Download PNG</button>\n\n        <h2>Buttons</h2>\n        <button\n          onClick={() => setButtons((prevState) => [...prevState, 'other'])}\n        >\n          Add buttons\n        </button>\n\n        {buttons.map((button) => (\n          <span key={button}>{button}</span>\n        ))}\n      </div>\n    </div>\n  )\n}\n","'use strict'\n\nimport { useCallback, useRef, useState } from 'react'\nimport {\n  toPng,\n  toJpeg,\n  toBlob,\n  toPixelData,\n  toSvg,\n  toCanvas\n} from 'html-to-image'\n\nimport { utils } from './utils'\n\nexport function useToImage(\n  { pixelRatio = 1, backgroundColor = 'transparent', ...restOptions } = {},\n  callbackFunc = utils.defaultDownloadImage\n) {\n  const baseRef = useRef()\n  const [state, setState] = useState({\n    isLoading: false,\n    error: null,\n    dataURL: null\n  })\n\n  const setRef = useCallback((node) => {\n    if (baseRef.current || !node) {\n      return null\n    } else if (node) {\n      baseRef.current = node\n    }\n  }, [])\n\n  const defaultGetter = (func, key, format) => async () => {\n    setState((prevState) => ({ ...state, isLoading: true }))\n\n    try {\n      const output = await func(baseRef?.current, {\n        pixelRatio,\n        backgroundColor,\n        ...restOptions\n      })\n\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        error: false,\n        [key]: output\n      }))\n\n      callbackFunc({\n        format,\n        data: output,\n        ...state,\n        ...restOptions\n      })\n    } catch (e) {\n      setState((prevState) => ({\n        ...state,\n        isLoading: false,\n        error: e\n      }))\n    }\n  }\n\n  const getSvg = useCallback(defaultGetter(toSvg, 'dataURL', 'svg'), [])\n  const getJpeg = useCallback(defaultGetter(toJpeg, 'dataURL', 'jpeg'), [])\n  const getPng = useCallback(defaultGetter(toPng, 'dataURL', 'png'), [])\n  const getBlob = useCallback(defaultGetter(toBlob, 'dataURL', 'png'), [])\n  const getCanvas = useCallback(defaultGetter(toCanvas, 'dataURL', 'svg'), [])\n  const getPixelData = useCallback(\n    defaultGetter(toPixelData, 'dataURL', 'svg'),\n    []\n  )\n\n  return {\n    ...state,\n    ref: setRef,\n    getSvg,\n    getJpeg,\n    getPng,\n    getBlob,\n    getPixelData,\n    getCanvas\n  }\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}